// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: frainrollup/frainrollup/frainsaction.proto

package types

import (
	fmt "fmt"
	io "io"
	math "math"
	math_bits "math/bits"

	proto "github.com/cosmos/gogoproto/proto"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Frainsaction struct {
	E   string `protobuf:"bytes,1,opt,name=e,proto3" json:"e,omitempty"`
	A   string `protobuf:"bytes,2,opt,name=a,proto3" json:"a,omitempty"`
	V   string `protobuf:"bytes,3,opt,name=v,proto3" json:"v,omitempty"`
	Tx  string `protobuf:"bytes,4,opt,name=tx,proto3" json:"tx,omitempty"`
	Op  string `protobuf:"bytes,5,opt,name=op,proto3" json:"op,omitempty"`
	Cid string `protobuf:"bytes,6,opt,name=cid,proto3" json:"cid,omitempty"`
}

func (m *Frainsaction) Reset()         { *m = Frainsaction{} }
func (m *Frainsaction) String() string { return proto.CompactTextString(m) }
func (*Frainsaction) ProtoMessage()    {}
func (*Frainsaction) Descriptor() ([]byte, []int) {
	return fileDescriptor_75a15d5ab9d4b569, []int{0}
}
func (m *Frainsaction) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Frainsaction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Frainsaction.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Frainsaction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Frainsaction.Merge(m, src)
}
func (m *Frainsaction) XXX_Size() int {
	return m.Size()
}
func (m *Frainsaction) XXX_DiscardUnknown() {
	xxx_messageInfo_Frainsaction.DiscardUnknown(m)
}

var xxx_messageInfo_Frainsaction proto.InternalMessageInfo

func (m *Frainsaction) GetE() string {
	if m != nil {
		return m.E
	}
	return ""
}

func (m *Frainsaction) GetA() string {
	if m != nil {
		return m.A
	}
	return ""
}

func (m *Frainsaction) GetV() string {
	if m != nil {
		return m.V
	}
	return ""
}

func (m *Frainsaction) GetTx() string {
	if m != nil {
		return m.Tx
	}
	return ""
}

func (m *Frainsaction) GetOp() string {
	if m != nil {
		return m.Op
	}
	return ""
}

func (m *Frainsaction) GetCid() string {
	if m != nil {
		return m.Cid
	}
	return ""
}

func init() {
	proto.RegisterType((*Frainsaction)(nil), "frainrollup.frainrollup.Frainsaction")
}

func init() {
	proto.RegisterFile("frainrollup/frainrollup/frainsaction.proto", fileDescriptor_75a15d5ab9d4b569)
}

var fileDescriptor_75a15d5ab9d4b569 = []byte{
	// 179 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xd2, 0x4a, 0x2b, 0x4a, 0xcc,
	0xcc, 0x2b, 0xca, 0xcf, 0xc9, 0x29, 0x2d, 0xd0, 0xc7, 0x60, 0x17, 0x27, 0x26, 0x97, 0x64, 0xe6,
	0xe7, 0xe9, 0x15, 0x14, 0xe5, 0x97, 0xe4, 0x0b, 0x89, 0x23, 0xc9, 0xeb, 0x21, 0xb1, 0x95, 0xb2,
	0xb8, 0x78, 0xdc, 0x90, 0x94, 0x0b, 0xf1, 0x70, 0x31, 0xa6, 0x4a, 0x30, 0x2a, 0x30, 0x6a, 0x70,
	0x06, 0x31, 0xa6, 0x82, 0x78, 0x89, 0x12, 0x4c, 0x10, 0x5e, 0x22, 0x88, 0x57, 0x26, 0xc1, 0x0c,
	0xe1, 0x95, 0x09, 0xf1, 0x71, 0x31, 0x95, 0x54, 0x48, 0xb0, 0x80, 0xb9, 0x4c, 0x25, 0x15, 0x20,
	0x7e, 0x7e, 0x81, 0x04, 0x2b, 0x84, 0x9f, 0x5f, 0x20, 0x24, 0xc0, 0xc5, 0x9c, 0x9c, 0x99, 0x22,
	0xc1, 0x06, 0x16, 0x00, 0x31, 0x9d, 0xac, 0x4e, 0x3c, 0x92, 0x63, 0xbc, 0xf0, 0x48, 0x8e, 0xf1,
	0xc1, 0x23, 0x39, 0xc6, 0x09, 0x8f, 0xe5, 0x18, 0x2e, 0x3c, 0x96, 0x63, 0xb8, 0xf1, 0x58, 0x8e,
	0x21, 0x4a, 0x01, 0xec, 0x24, 0x5d, 0xa8, 0xfb, 0x2b, 0x50, 0x7c, 0x53, 0x52, 0x59, 0x90, 0x5a,
	0x9c, 0xc4, 0x06, 0xf6, 0x87, 0x31, 0x20, 0x00, 0x00, 0xff, 0xff, 0x61, 0x1a, 0xcc, 0x34, 0xf5,
	0x00, 0x00, 0x00,
}

func (m *Frainsaction) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Frainsaction) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Frainsaction) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Cid) > 0 {
		i -= len(m.Cid)
		copy(dAtA[i:], m.Cid)
		i = encodeVarintFrainsaction(dAtA, i, uint64(len(m.Cid)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Op) > 0 {
		i -= len(m.Op)
		copy(dAtA[i:], m.Op)
		i = encodeVarintFrainsaction(dAtA, i, uint64(len(m.Op)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Tx) > 0 {
		i -= len(m.Tx)
		copy(dAtA[i:], m.Tx)
		i = encodeVarintFrainsaction(dAtA, i, uint64(len(m.Tx)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.V) > 0 {
		i -= len(m.V)
		copy(dAtA[i:], m.V)
		i = encodeVarintFrainsaction(dAtA, i, uint64(len(m.V)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.A) > 0 {
		i -= len(m.A)
		copy(dAtA[i:], m.A)
		i = encodeVarintFrainsaction(dAtA, i, uint64(len(m.A)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.E) > 0 {
		i -= len(m.E)
		copy(dAtA[i:], m.E)
		i = encodeVarintFrainsaction(dAtA, i, uint64(len(m.E)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintFrainsaction(dAtA []byte, offset int, v uint64) int {
	offset -= sovFrainsaction(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Frainsaction) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.E)
	if l > 0 {
		n += 1 + l + sovFrainsaction(uint64(l))
	}
	l = len(m.A)
	if l > 0 {
		n += 1 + l + sovFrainsaction(uint64(l))
	}
	l = len(m.V)
	if l > 0 {
		n += 1 + l + sovFrainsaction(uint64(l))
	}
	l = len(m.Tx)
	if l > 0 {
		n += 1 + l + sovFrainsaction(uint64(l))
	}
	l = len(m.Op)
	if l > 0 {
		n += 1 + l + sovFrainsaction(uint64(l))
	}
	l = len(m.Cid)
	if l > 0 {
		n += 1 + l + sovFrainsaction(uint64(l))
	}
	return n
}

func sovFrainsaction(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozFrainsaction(x uint64) (n int) {
	return sovFrainsaction(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Frainsaction) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFrainsaction
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Frainsaction: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Frainsaction: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field E", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFrainsaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFrainsaction
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFrainsaction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.E = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field A", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFrainsaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFrainsaction
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFrainsaction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.A = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field V", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFrainsaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFrainsaction
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFrainsaction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.V = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tx", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFrainsaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFrainsaction
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFrainsaction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tx = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Op", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFrainsaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFrainsaction
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFrainsaction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Op = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFrainsaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFrainsaction
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFrainsaction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFrainsaction(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFrainsaction
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipFrainsaction(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowFrainsaction
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFrainsaction
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFrainsaction
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthFrainsaction
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupFrainsaction
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthFrainsaction
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthFrainsaction        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowFrainsaction          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupFrainsaction = fmt.Errorf("proto: unexpected end of group")
)
